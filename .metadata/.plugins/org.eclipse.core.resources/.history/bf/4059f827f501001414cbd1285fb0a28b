package guiObjects;
import rpgElements.*;
import wordHandler.*;

import java.util.ArrayList;

import org.lwjgl.LWJGLException;
import org.lwjgl.input.Mouse;
import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.DisplayMode;
import org.lwjgl.opengl.GL11;
/*
 * Handles tasks involving displaying objects.
 */
public class GameDisplayHandler {

	protected ArrayList<Sprite> spriteList = new ArrayList<Sprite>();
	protected ArrayList<WordCube> textList = new ArrayList<WordCube>();
	protected ArrayList<Combatant> fighterList = new ArrayList<Combatant>();
	
	protected AdventureHandler gameController;
	
	public GameDisplayHandler() 
	{
		// TODO Auto-generated constructor stub
	}
	public void StartGameDraw()
	{
		//Start up and create the display.
		try 
		{
			Display.setDisplayMode(new DisplayMode(800,600));
			Display.create();
			Display.setVSyncEnabled(false);
		} 
		catch (LWJGLException e) 
		{
			e.printStackTrace();
			System.exit(0);
		}

		GL11.glMatrixMode(GL11.GL_PROJECTION);
		GL11.glLoadIdentity();
		GL11.glMatrixMode(GL11.GL_MODELVIEW);
		GL11.glEnable(GL11.GL_TEXTURE_2D);
		GL11.glShadeModel(GL11.GL_SMOOTH);        
		GL11.glDisable(GL11.GL_DEPTH_TEST);
		GL11.glDisable(GL11.GL_LIGHTING);                    
		GL11.glClearColor(0.0f, 0.0f, 0.0f, 0.0f);                
		GL11.glClearDepth(1);                                       
		GL11.glEnable(GL11.GL_BLEND);
		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
		GL11.glViewport(0,0,800,600);
		GL11.glMatrixMode(GL11.GL_PROJECTION);
		GL11.glLoadIdentity();
		GL11.glOrtho(0, Display.getWidth(), Display.getHeight(), 0, 1, -1);
		GL11.glMatrixMode(GL11.GL_MODELVIEW);
		
		this.updateLoop();
		
	}
	public void updateLoop()
	{
		//TEMPORARY
		//techDemoLoadUp();
		loadUpNewGame();
		//TEMPORARY
		while (!Display.isCloseRequested()) 
		{
			int mouseXPos = Mouse.getX();
			int mouseYPos = Math.abs( 600-Mouse.getY() );
			boolean isMouseDown = Mouse.isButtonDown(0);
			for( int spriteCount = 0; spriteCount < spriteList.size(); spriteCount++ )
			{
				Sprite fetchSprite = spriteList.get(spriteCount); 
				fetchSprite.drawQuad();
				fetchSprite.animate();
				fetchSprite.getMousePos(mouseXPos, mouseYPos);
				fetchSprite.mouseDown(isMouseDown);
				
			}
			for( int wordCount = 0; wordCount < textList.size(); wordCount++ )
			{
				WordCube fetchCube = textList.get(wordCount);
				fetchCube.render();
				fetchCube.getMousePos(mouseXPos, mouseYPos);
				fetchCube.mouseDown(isMouseDown);
			}
			for(Combatant e: fighterList)
			{
				e.animate();
			}
			Display.update();
		}
		Display.destroy();
	}
	
	public void addNewSprite(Sprite newSprite)
	{
		spriteList.add( newSprite );
		//System.out.println(spriteList);
		//System.out.println(spriteList.size());
		
	}
	public void addNewWordCube( WordCube newWordCube )
	{
		textList.add( newWordCube );
	}
	public void addNewCombatant( Combatant newCombatant )
	{
		fighterList.add(newCombatant);
	}
	/*
	 * Test only function to demonstrate current state.
	 */
	public void techDemoLoadUp()
	{
		/*
		Sprite Player = new Sprite(100,350);
		Player.init("Player.png");
		addNewSprite(Player);
		
		for(int enemyCount = 0; enemyCount < 3; enemyCount++ )
		{
			Sprite enemy = new Sprite(200 + 200*enemyCount,350);
			enemy.init("Enemy.png");
			addNewSprite(enemy);
		}
		Sprite ButtonAttack = new Sprite(250,0);
		ButtonAttack.init("Attack.png");
		addNewSprite(ButtonAttack);
		Sprite ButtonDefend = new Sprite(350,0);
		ButtonDefend.init("Defend.png");
		addNewSprite(ButtonDefend);
		*/
	}
	public void loadUpNewGame()
	{
		
		Sprite Backround = new Sprite(0,0);
		Backround.init("Backround.png");
		addNewSprite(Backround);
		gameController = new AdventureHandler(this);
	}

	public static void main(String[] args) 
	{
		// TODO Auto-generated method stub
		GameDisplayHandler display = new GameDisplayHandler();
		display.StartGameDraw();

	}

}
